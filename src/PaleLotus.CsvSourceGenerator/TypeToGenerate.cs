using System.Text;

namespace PaleLotus.CsvSourceGenerator;

internal sealed record TypeToGenerate
{
    public string TypeName { get; }
    private string Namespace { get; set; }
    private string AccessModifiers { get; }
    private string DataType { get; }
    private EquatableArray<string> Properties { get; }
    
    private const string GeneratedNote = """
                                         //------------------------------------------------------------------------------
                                         // <auto-generated>
                                         //     This code was generated by the PaleLotus.CsvSourceGenerato source generator
                                         //
                                         //     Changes to this file may cause incorrect behavior and will be lost if
                                         //     the code is regenerated.
                                         // </auto-generated>
                                         //------------------------------------------------------------------------------
                                         """;

    private StringBuilder _stringBuilder = new();

    public TypeToGenerate(string typeName,
        List<string> values,
        string accessModifiers,
        string dataType, string nameSpace)
    {
        TypeName = typeName;
        AccessModifiers = accessModifiers;
        DataType = dataType;
        Namespace = nameSpace;
        Properties = new EquatableArray<string>(values.Where(str => !str.Equals("EqualityContract")).ToArray());
    }
    
    public string Generate()
    {
        _stringBuilder.Clear();
        _stringBuilder.AppendLine(GeneratedNote);
        
        var properties = string.Join(",",Properties.Select(str => str.Replace(str, $$"""{{{str}}}""")));
        
        var hasNameSpace = !string.IsNullOrEmpty(Namespace);
        if (hasNameSpace)
             _stringBuilder.AppendLine( $"namespace {Namespace}\n{{");
        
        var template = $$"""
                         {{AccessModifiers}} partial {{DataType}} {{TypeName}} : PaleLotus.CsvSourceGenerator.ICsvSerializable
                         {
                            public string ToCsv() => $"{{properties}}";
                            public string GetCsvHeader() => $"{{string.Join(",", Properties)}}";
                         }
                         """;
        if (hasNameSpace)
        {
            foreach (var str in template.Split('\n'))
            {
                _stringBuilder.Append('\t');
                _stringBuilder.AppendLine(str);
            }

            _stringBuilder.Append('}');
        }
        else
        {
            _stringBuilder.Append(template);
        }
        
        return _stringBuilder.ToString();
    }
}